name: Build and deploy

on:
    push:
        tags: ["v*.*.*"]

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    # php-image:
    #     name: Build and push php image
    #     runs-on: ubuntu-latest
    #     permissions:
    #         contents: read
    #         packages: write
    #         id-token: write
    #     steps:
    #         - name: Checkout repository
    #           uses: actions/checkout@v3

    #         # - name: Set env
    #         #   run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    #         # - name: Test
    #         #   run: |
    #         #     echo $RELEASE_VERSION
    #         #     echo ${{ env.RELEASE_VERSION }}

    #         - name: Load .env file
    #           uses: xom9ikk/dotenv@v2

    #         - name: Set env
    #           run: |
    #             echo "PHP_IMAGE_VERSION=${PHP_IMAGE_VERSION}" >> $GITHUB_ENV

    #         - name: Docker meta
    #           id: meta
    #           uses: docker/metadata-action@v4
    #           with:
    #             images: |
    #               ghcr.io/rbrauner/learning-symfony-guestbook-php
    #             tags: |
    #               type=schedule
    #               type=ref,event=branch
    #               type=ref,event=pr
    #               type=semver,pattern={{version}}
    #               type=semver,pattern={{major}}.{{minor}}
    #               type=semver,pattern={{major}}
    #               type=sha

    #         - name: Set up Docker Buildx
    #           uses: docker/setup-buildx-action@v2

    #         - name: Log into registry
    #           uses: docker/login-action@v2
    #           with:
    #               registry: ${{ env.REGISTRY }}
    #               username: ${{ github.repository_owner }}
    #               password: ${{ secrets.GITHUB_TOKEN }}

    #         - name: Build and push
    #           uses: docker/build-push-action@v4
    #           with:
    #               context: ./docker/prod/php
    #               push: true
    #               tags: ${{ steps.meta.outputs.tags }}
    #               labels: ${{ steps.meta.outputs.labels }}
    #               cache-from: type=gha
    #               cache-to: type=gha,mode=max
    #               build-args: |
    #                 PHP_VERSION=${{ env.PHP_IMAGE_VERSION }}

    # nginx-image:
    #     name: Build and push nginx image
    #     runs-on: ubuntu-latest
    #     permissions:
    #         contents: read
    #         packages: write
    #         id-token: write
    #     steps:
    #         - name: Checkout repository
    #           uses: actions/checkout@v3

    #         # - name: Set env
    #         #   run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    #         # - name: Test
    #         #   run: |
    #         #     echo $RELEASE_VERSION
    #         #     echo ${{ env.RELEASE_VERSION }}

    #         - name: Load .env file
    #           uses: xom9ikk/dotenv@v2

    #         - name: Set env
    #           run: |
    #             echo "NGINX_IMAGE_VERSION=${NGINX_IMAGE_VERSION}" >> $GITHUB_ENV
    #             echo "PHP_PORT=${PHP_PORT}" >> $GITHUB_ENV

    #         - name: Docker meta
    #           id: meta
    #           uses: docker/metadata-action@v4
    #           with:
    #             images: |
    #               ghcr.io/rbrauner/learning-symfony-guestbook-nginx
    #             tags: |
    #               type=schedule
    #               type=ref,event=branch
    #               type=ref,event=pr
    #               type=semver,pattern={{version}}
    #               type=semver,pattern={{major}}.{{minor}}
    #               type=semver,pattern={{major}}
    #               type=sha

    #         - name: Set up Docker Buildx
    #           uses: docker/setup-buildx-action@v2

    #         - name: Log into registry
    #           uses: docker/login-action@v2
    #           with:
    #               registry: ${{ env.REGISTRY }}
    #               username: ${{ github.repository_owner }}
    #               password: ${{ secrets.GITHUB_TOKEN }}

    #         - name: Build and push
    #           uses: docker/build-push-action@v4
    #           with:
    #               context: ./docker/prod/nginx
    #               push: true
    #               tags: ${{ steps.meta.outputs.tags }}
    #               labels: ${{ steps.meta.outputs.labels }}
    #               cache-from: type=gha
    #               cache-to: type=gha,mode=max
    #               build-args: |
    #                 NGINX_VERSION=${{ env.NGINX_IMAGE_VERSION }}
    #                 PHP_UPSTREAM_CONTAINER=php
    #                 PHP_UPSTREAM_PORT=${{ env.PHP_PORT }}

    # database-image:
    #     name: Build and push database image
    #     runs-on: ubuntu-latest
    #     permissions:
    #         contents: read
    #         packages: write
    #         id-token: write
    #     steps:
    #         - name: Checkout repository
    #           uses: actions/checkout@v3

    #         # - name: Set env
    #         #   run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    #         # - name: Test
    #         #   run: |
    #         #     echo $RELEASE_VERSION
    #         #     echo ${{ env.RELEASE_VERSION }}

    #         - name: Load .env file
    #           uses: xom9ikk/dotenv@v2

    #         - name: Set env
    #           run: |
    #             echo "DATABASE_IMAGE_VERSION=${DATABASE_IMAGE_VERSION}" >> $GITHUB_ENV

    #         - name: Docker meta
    #           id: meta
    #           uses: docker/metadata-action@v4
    #           with:
    #             images: |
    #               ghcr.io/rbrauner/learning-symfony-guestbook-database
    #             tags: |
    #               type=schedule
    #               type=ref,event=branch
    #               type=ref,event=pr
    #               type=semver,pattern={{version}}
    #               type=semver,pattern={{major}}.{{minor}}
    #               type=semver,pattern={{major}}
    #               type=sha

    #         - name: Set up Docker Buildx
    #           uses: docker/setup-buildx-action@v2

    #         - name: Log into registry
    #           uses: docker/login-action@v2
    #           with:
    #               registry: ${{ env.REGISTRY }}
    #               username: ${{ github.repository_owner }}
    #               password: ${{ secrets.GITHUB_TOKEN }}

    #         - name: Build and push
    #           uses: docker/build-push-action@v4
    #           with:
    #               context: ./docker/prod/database
    #               push: true
    #               tags: ${{ steps.meta.outputs.tags }}
    #               labels: ${{ steps.meta.outputs.labels }}
    #               cache-from: type=gha
    #               cache-to: type=gha,mode=max
    #               build-args: |
    #                 POSTGRES_VERSION=${{ env.DATABASE_IMAGE_VERSION }}

    # mailer-image:
    #     name: Build and push mailer image
    #     runs-on: ubuntu-latest
    #     permissions:
    #         contents: read
    #         packages: write
    #         id-token: write
    #     steps:
    #         - name: Checkout repository
    #           uses: actions/checkout@v3

    #         # - name: Set env
    #         #   run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    #         # - name: Test
    #         #   run: |
    #         #     echo $RELEASE_VERSION
    #         #     echo ${{ env.RELEASE_VERSION }}

    #         - name: Load .env file
    #           uses: xom9ikk/dotenv@v2

    #         - name: Set env
    #           run: |
    #             echo "MAILER_IMAGE_VERSION=${MAILER_IMAGE_VERSION}" >> $GITHUB_ENV

    #         - name: Docker meta
    #           id: meta
    #           uses: docker/metadata-action@v4
    #           with:
    #             images: |
    #               ghcr.io/rbrauner/learning-symfony-guestbook-mailer
    #             tags: |
    #               type=schedule
    #               type=ref,event=branch
    #               type=ref,event=pr
    #               type=semver,pattern={{version}}
    #               type=semver,pattern={{major}}.{{minor}}
    #               type=semver,pattern={{major}}
    #               type=sha

    #         - name: Set up Docker Buildx
    #           uses: docker/setup-buildx-action@v2

    #         - name: Log into registry
    #           uses: docker/login-action@v2
    #           with:
    #               registry: ${{ env.REGISTRY }}
    #               username: ${{ github.repository_owner }}
    #               password: ${{ secrets.GITHUB_TOKEN }}

    #         - name: Build and push
    #           uses: docker/build-push-action@v4
    #           with:
    #               context: ./docker/prod/mailer
    #               push: true
    #               tags: ${{ steps.meta.outputs.tags }}
    #               labels: ${{ steps.meta.outputs.labels }}
    #               cache-from: type=gha
    #               cache-to: type=gha,mode=max
    #               build-args: |
    #                 MAILER_VERSION=${{ env.MAILER_IMAGE_VERSION }}

    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        # needs: [php-image, nginx-image, database-image, mailer-image]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            # - name: Set env
            #   run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
            # - name: Test
            #   run: |
            #     echo $RELEASE_VERSION
            #     echo ${{ env.RELEASE_VERSION }}

            - name: Set env
              run: echo "TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

            - name: Upload docker-compose.prod.yml
              uses: appleboy/scp-action@v0.1.4
              with:
                host: ${{ secrets.HOST }}
                port: ${{ secrets.PORT }}
                username: ${{ secrets.USERNAME }}
                key: ${{ secrets.KEY }}
                source: "docker-compose.prod.yml"
                target: "${{ secrets.REMOTE_PATH }}"

            - name: Docker compose pull and up
              uses: appleboy/ssh-action@v0.1.10
              with:
                host: ${{ secrets.HOST }}
                port: ${{ secrets.PORT }}
                username: ${{ secrets.USERNAME }}
                key: ${{ secrets.KEY }}
                script: |
                  cd ${{ secrets.REMOTE_PATH }}
                  sed -i "s/^TAG=.*/TAG=${{ env.TAG//v }}/g" .env
                #   docker-compose -f ./docker-compose.prod.yml down
                #   docker-compose -f ./docker-compose.prod.yml pull
                #   docker-compose -f ./docker-compose.prod.yml up -d
